// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String?
  email     String?   @unique
  emailVerified DateTime?
  image String?
  hashedPassword  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  conversationIds String[] @db.ObjectId
  conversations Conversation[] @relation(fields: [conversationIds], references: [id])

  seenMessagesIds String[] @db.ObjectId
  seenMessages Message[] @relation("Seen", fields: [seenMessagesIds], references: [id])

  accounts Account[]
  messages Message[]
  //__v       Int      @map("__v")
}

model Account {
  id String   @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  type String
  provider String
  providerAccountId String
  refresh_token String? @db.String
  access_token String? @db.String
  expires_at Int?
  token_type String?
  scope String?
  id_token String? @db.String
  session_state String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  //__v       Int      @map("__v")
}

model Conversation {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  lastMessageAt DateTime @default(now())
  name     String?
  isGroup  Boolean?

  messageIds String[] @db.ObjectId
  messages Message[]

  userIds String[] @db.ObjectId
  users User[] @relation(fields: [userIds], references: [id])
  //__v       Int      @map("__v")
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  body String?
  image String?
  createdAt DateTime @default(now())

  seenIds     String[] @db.ObjectId
  seen     User[] @relation("Seen", fields: [seenIds], references: [id])

  senderId String @db.ObjectId
  sender User @relation(fields: [senderId], references: [id], onDelete: Cascade)

  conversationId String @db.ObjectId
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  //__v       Int      @map("__v")
}


// model Student {
//   id                    String   @id @default(auto()) @map("_id") @db.ObjectId
//   studentID             Int
//   studentFirstName      String
//   studentLastName       String
//   studentEmail          String   @unique
//   studentPassword       String
//   studentStatus         String
//   studentClassification String
//   studentGPA            Float
//   advisorID             Int
//   __v                   Int      @map("__v")
//   studentCredit         Int
//   studentMajor          String
// }

// model Advisor {
//   id              String   @id @default(auto()) @map("_id") @db.ObjectId
//   advisorID       Int
//   advisorFirstName String
//   advisorLastName  String
//   advisorEmail     String   @unique
//   advisorPassword  String
//   departmentName   String
//   __v             Int      @map("__v")
// }
